//: üéØ *Para visualizar o arquivo renderizado: Editor > Show Rendered Markup*
/*:
 ****
 
 ### Swift Developer Roadmap
 # MVVM
 ## Model üî∏ View üî∏ ViewModel
 
 ****
 
 
 
 ### Conte√∫do:
 - **[Conceitos](Definition)**
 - **[Boas pr√°ticas](Guideline)**
 - **[Refer√™ncias](References)**
 
 */

import UIKit

var str = "Hello, MVVM"



/*:

 # Conceitos

 */

//: > *Model/View/ViewModel is a variation of Model/View/Controller (MVC) that is tailored for modern UI development platforms where the View is the responsibility of a designer rather than a classic developer. ‚Äî John Gossman, 2005*

//: > *MVVM √© um padr√£o arquitetural de software que facilita a separa√ß√£o do desenvolvimento da interface gr√°fica do desenvolvimento da l√≥gica de neg√≥cios*

/*:
 ## MVC x MVVM
 
 O MVC geralmente √© o primeiro padr√£o que temos contato ao iniciar o desenvolvimento iOS.
 
 At√© hoje ele √© o padr√£o recomendado pela Apple:
 
 ![mvc-apple](mvc-1.png)
 
 
 
 Na pr√°tica, mesmo sabendo que a ViewController e a View s√£o componentes tecnicamente distintos, o que acontece √© que ViewController e View andam de m√£o dadas e isso acaba nos levando ao famoso caso do **Massive View Controller**
 
 ![mvc-real](mvc-2.png)
 
 
 O padr√£o MVVM adicionou uma camada (ViewModel) nesse diagrama deixando mais claro o local onde devemos colocar a l√≥gica de acesso ao Model.
 
 ![mvvvm-diagram](mvvm-1.png)
 
 *"O termo ViewModel significa "Model de uma View" que fornece uma especializa√ß√£o do Model que a View pode usar para vincula√ß√£o de dados (data-binding). A ViewModel cont√©m transformadores de dados que convertem tipos de modelo em tipos de exibi√ß√£o e cont√©m tamb√©m comandos que a View pode usar para interagir com o modelo" ‚Äî John Gossman*
 
 Pontanto, na ViewModel, n√£o "mexemos" diretamente na View. Lidamos com a l√≥gica de neg√≥cios no ViewModel e, ent√£o, a View se altera de acordo. Escrevemos coisas de apresenta√ß√£o, como converter Date em String no ViewModel em vez da View.
 
 Por fim, torna-se poss√≠vel escrever um teste mais simples para a l√≥gica de apresenta√ß√£o sem conhecer a implementa√ß√£o da View.
 
 */

/*:

 # Boas pr√°ticas
 

 
 ‚úÖ O que seu ViewModel deve fazer:
 - Conhecer o (Model || Repository) para fornecer os dados que a View precisa
 - Valida√ß√µes de regras de apresenta√ß√£o
 - Fornecer m√©todos para que a View possa requisitar a√ß√µes referentes ao Model
 - Ter bindings para notificar a View sobre (altera√ß√µes || erros) do Model
 
 
 
 üö´ O que seu ViewModel **N√ÉO** deve fazer:
 - Conhecer a inst√¢ncia da View
 - Ter regras de exibi√ß√£o da View como loading, status, ciclo de vida..
 - Ter (delegates || regras) de navega√ß√£o

 */

/*:

 ### Refer√™ncias
 
  * [**Introduction to MVVM** - John Gossman](https://learn.microsoft.com/en-gb/archive/blogs/johngossman/introduction-to-modelviewviewmodel-pattern-for-building-wpf-apps)
  * [**Introduction to MVVM** - Objc.io](https://www.objc.io/issues/13-architecture/mvvm/)
  * [**Model-View-Viewmodel And Swift** - Cocoacasts](https://cocoacasts.com/collections/model-view-viewmodel-and-swift)
  * [**Model‚Äìview‚Äìviewmodel** - Wikipedia](https://en.wikipedia.org/wiki/Model‚Äìview‚Äìviewmodel)

 */
